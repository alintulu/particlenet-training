selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   >-
   (event_no%7 != 0) & (fj_pt>200) & (fj_pt<2500) & (fj_genjet_sdmass<260) & (((sample_isQCD==0) & (label_QCD_all==0)) | ((sample_isQCD==1) & (label_QCD_all==1)))

test_time_selection:
   >-
   (event_no%7 == 0) & (fj_no<2) & (fj_pt>200) & (fj_pt<2500) & (fj_genjet_sdmass<260) & (((sample_isQCD==0) & (label_QCD_all==0)) | ((sample_isQCD==1) & (label_QCD_all==1)))

treename: mmtree/tree

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   pfcand_mask: ak.ones_like(pfcand_etarel)
   fj_isH:      (label_H_bb == 1) | (label_H_cc == 1) | (label_H_qq == 1) | (label_H_tautau == 1)

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 

inputs:
   pf_points:
      length: 100
      vars: 
         - [pfcand_etarel, null]
         - [pfcand_phirel, null]
   pf_features:
      length: 100
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - [pfcand_pt_log_nopuppi, 1, 0.5]
         - [pfcand_e_log_nopuppi, 1.3, 0.5]
         - [pfcand_etarel, null]
         - [pfcand_phirel, null]
         - [pfcand_abseta, 0.6, 1.6]
         - [pfcand_charge, null]
         - [pfcand_isEl, null]
         - [pfcand_isMu, null]
         - [pfcand_isGamma, null]
         - [pfcand_isChargedHad, null]
         - [pfcand_isNeutralHad, null]
         - [pfcand_lostInnerHits, null]
         - [pfcand_normchi2, 5, 0.2]
         - [pfcand_quality, 0, 0.2]
         - [pfcand_dz, 0, 180]
         - [pfcand_dzsig, 0, 0.9]
         - [pfcand_dxy, 0.0, 300]
         - [pfcand_dxysig, 0, 1.0]
         - [pfcand_btagEtaRel, 1.5, 0.5]
         - [pfcand_btagPtRatio, 0, 1]
         - [pfcand_btagPParRatio, 0, 1]
   pf_mask:
      length: 100
      vars: 
         - [pfcand_mask, null]

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   # type: simple
   # value: [
   #    label_H_bb, label_H_cc, label_H_qq,
   #    label_QCD_bb, label_QCD_cc, label_QCD_b, label_QCD_c, label_QCD_others,
   #    ]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   type: custom
   value: 
      target_mass: np.maximum(1, np.where(fj_isH, fj_gen_mass, fj_genjet_sdmass))

observers:
   - event_no
   - fj_no
   - fj_pt
   - fj_mass
   - fj_n2b1
   - fj_eta
   - fj_phi
   - fj_msd
   - fj_npfcands
   - fj_genjet_sdmass
   - fj_gen_mass
   - label_QCD_all
   - label_H_bb
   - label_H_cc
   - label_H_qq
   - label_H_tautau
   - sample_isQCD

weights:
   ### [option 1] use precomputed weights stored in the input files
   # use_precomputed_weights: true
   # weight_branches: [weight, class_weight]
   ### [option 2] compute weights on-the-fly using reweighting histograms
   use_precomputed_weights: false
   reweight_method: flat
   reweight_vars:
      fj_pt: [200, 251, 316, 398, 501, 630, 793, 997, 1255, 1579, 1987, 2500]
      # fj_genjet_sdmass: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260]
      fj_genjet_sdmass: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260]
   reweight_classes: [label_H_bb, label_H_cc, label_H_qq, label_H_tautau]
   #reweight_classes: [label_QCD_all, label_H_bb, label_H_cc, label_H_qq]
   class_weights: [1, 1, 1, 1]
   #class_weights: [1, 1, 1, 1, 1]
   reweight_threshold: 15
   reweight_hists:

